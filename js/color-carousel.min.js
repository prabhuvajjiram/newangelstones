(function($){'use strict';
// Track if mobile device for optimizations
const isMobile = window.innerWidth < 768;
let colors=[];
let currentColorIndex=0;

// Add direct fixes for mobile color names and video
function applyMobileFixes() {
    if (!isMobile) return;
    
    // Mobile-only CSS fixes via style tag
    const mobileStyle = document.createElement('style');
    mobileStyle.textContent = `
        @media (max-width: 767px) {
            /* Fix video display on mobile */
            #hero-video {
                opacity: 1 !important;
                object-fit: cover !important;
                width: 100% !important;
                height: 100% !important;
            }
            
            /* Fix carousel scrolling */
            #variety-of-granites .owl-carousel {
                display: flex !important;
                overflow-x: auto !important;
                -webkit-overflow-scrolling: touch !important;
            }
            
            /* Fix owl items */
            #variety-of-granites .owl-item {
                flex: 0 0 auto !important;
                width: 160px !important;
                margin: 0 5px !important;
            }
        }
        
        /* Fix color names regardless of device (important for both mobile and desktop) */
        #variety-of-granites .caption p, 
        .caption p,
        .owl-carousel .caption p,
        .owl-item .caption p {
            color: #d4af37 !important;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.9) !important;
            font-weight: 600 !important;
        }
    `;
    document.head.appendChild(mobileStyle);
    
    // Fix mobile video
    const video = document.getElementById('hero-video');
    if (video) {
        video.setAttribute('playsinline', '');
        video.setAttribute('webkit-playsinline', '');
        video.muted = true;
        
        // Force video to play
        setTimeout(function() {
            video.pause();
            video.currentTime = 0;
            video.play().catch(() => {});
        }, 500);
    }
    
    // Fix color text visibility directly
    setTimeout(() => {
        $('.caption p').each(function() {
            $(this).css({
                'color': '#d4af37',
                'text-shadow': '1px 1px 3px rgba(0,0,0,0.9)',
                'font-weight': '600'
            });
        });
        
        // Add mobile carousel auto-scroll
        if (isMobile) {
            const carousel = document.querySelector('#variety-of-granites .owl-carousel');
            if (carousel) {
                let position = 0;
                setInterval(function() {
                    if (document.hidden) return;
                    
                    position += 160;
                    if (position >= carousel.scrollWidth - carousel.clientWidth) {
                        position = 0;
                    }
                    
                    carousel.scrollTo({
                        left: position,
                        behavior: 'smooth'
                    });
                }, 3000);
            }
        }
    }, 1000);
}

function initColorCarousel(){
    // Only initialize if the colors section exists
    if (!$('#variety-of-granites').length) return;
    
    fetchColorImages()
        .then(() => {
            populateColorDisplay();
            setupEventListeners();
            
            // Apply fixes after carousel is initialized
            applyMobileFixes();
        })
        .catch(error => {
            console.error('Error initializing color carousel:', error);
        });
}

function fetchColorImages(){
    return new Promise((resolve,reject) => {
        $.ajax({
            url: 'get_color_images.php',
            dataType: 'json',
            cache: true, // Enable caching for better performance
            success: function(data) {
                // Handle both response formats for compatibility
                if (data && data.colors && data.colors.length > 0) {
                    // Format: {colors: [...]}
                    colors = data.colors;
                    resolve();
                } else if (data && Array.isArray(data) && data.length > 0) {
                    // Format: [...]
                    colors = data;
                    resolve();
                } else {
                    console.error('No valid color data found in response:', data);
                    reject('No color images found');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching color images:', error);
                reject(error);
            }
        });
    });
}

function populateColorDisplay(){
    const $container = $('#variety-of-granites .owl-carousel');
    $container.removeClass('owl-carousel owl-theme');
    $container.empty();
    $container.addClass('color-scroll-container')
             .attr('role', 'region')
             .attr('aria-label', 'Color options carousel');
    
    // Preprocess the colors to ensure all have valid paths
    const validColors = colors.filter(color => color && color.path);
    
    // Create all items at once using a document fragment for better performance
    const fragment = document.createDocumentFragment();
    
    validColors.forEach((color, index) => {
        // Create the item element
        const itemEl = document.createElement('div');
        itemEl.className = 'color-scroll-item variety-of-granites';
        itemEl.setAttribute('data-index', index);
        itemEl.setAttribute('role', 'group');
        itemEl.setAttribute('aria-label', `${color.name} color option`);
        
        // Ensure path is correct, adding validation for paths that might be missing
        let imagePath = color.path;
        if (!imagePath.startsWith('http') && !imagePath.startsWith('/') && !imagePath.startsWith('./')) {
            // Add ./ if it's a relative path without a proper prefix
            imagePath = imagePath;
        }
        
        // Create the content HTML
        itemEl.innerHTML = `
            <div class="color-scroll-image">
                <img src="${imagePath}" 
                     width="220" 
                     height="220" 
                     class="img-fluid" 
                     alt="${color.name}" 
                     loading="lazy"
                     onerror="this.onerror=null; this.src='images/placeholder.jpg';">
            </div>
            <div class="caption">
                <p>${color.name}</p>
            </div>`;
        
        // Add to fragment
        fragment.appendChild(itemEl);
    });
    
    // Add all items at once
    $container[0].appendChild(fragment);
    
    // Check for existing carousel data and destroy it properly
    if ($container.data('owl.carousel')) {
        $container.trigger('destroy.owl.carousel');
    }
    
    // Add view all colors button
    const $carouselContainer = $container.closest('.col-md-12');
    if ($carouselContainer.find('.view-all-colors-btn').length === 0) {
        $carouselContainer.append(`
            <div class="text-center mt-4">
                <button class="btn view-all-colors-btn" aria-label="View all available colors">View All Colors</button>
            </div>`);
    }
    
    // For desktop, initialize carousel or grid view
    if (!isMobile) {
        initDesktopCarousel($container);
    }
}

function initDesktopCarousel($container) {
    // Only initialize Owl Carousel for desktop devices
    if (typeof $.fn.owlCarousel !== 'undefined') {
        $container.addClass('owl-carousel owl-theme')
            .owlCarousel({
                loop: true,
                margin: 10,
                nav: true,
                navText: [
                    '<i class="bi bi-chevron-left" aria-hidden="true"></i><span class="sr-only">Previous</span>', 
                    '<i class="bi bi-chevron-right" aria-hidden="true"></i><span class="sr-only">Next</span>'
                ],
                dots: true,
                responsive: {
                    0: { items: 1 },
                    576: { items: 2 },
                    768: { items: 3 },
                    992: { items: 4 }
                },
                autoplay: true,
                autoplayTimeout: 3000,
                autoplayHoverPause: true,
                lazyLoad: false, // Don't use Owl's lazy load
                accessibility: true
            });
            
        // Enhance owl carousel accessibility
        $container.find('.owl-prev, .owl-next').attr('aria-label', function() {
            return $(this).hasClass('owl-prev') ? 'Previous color' : 'Next color';
        });
    }
}

function initLazyLoading(){
    const lazyloadImages = document.querySelectorAll('img.lazyload');
    const imageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazyload');
                imageObserver.unobserve(img);
            }
        });
    }, {rootMargin: "0px 0px 200px 0px"});
    
    lazyloadImages.forEach(function(image) {
        imageObserver.observe(image);
    });
}

function setupEventListeners(){
    // View all colors button
    $(document).on('click', '.view-all-colors-btn', function(e) {
        e.preventDefault();
        showAllColorsModal();
    });
    
    // Color item click for fullscreen view
    $(document).on('click', '.color-scroll-item', function(e) {
        const index = $(this).data('index');
        showColorFullscreen(index);
    });
    
    // Color grid item click
    $(document).on('click', '.color-grid-item', function(e) {
        const index = $(this).data('index');
        showColorFullscreen(index);
    });
    
    // Fullscreen navigation buttons
    $(document).on('click', '.color-fullscreen-nav', function(e) {
        e.stopPropagation();
        if ($(this).hasClass('color-fullscreen-prev')) {
            navigateColors('prev');
        } else {
            navigateColors('next');
        }
    });
    
    // Click on fullscreen background to close
    $(document).on('click', '.color-fullscreen-container', function(e) {
        if (e.target === this) {
            closeColorFullscreen();
        }
    });
    
    // Close button click
    $(document).on('click', '.color-fullscreen-close', function(e) {
        e.stopPropagation();
        closeColorFullscreen();
    });
    
    // Keyboard navigation
    $(document).on('keydown', function(e) {
        if ($('.color-fullscreen-container').is(':visible')) {
            if (e.key === 'Escape') {
                closeColorFullscreen();
            } else if (e.key === 'ArrowLeft') {
                navigateColors('prev');
            } else if (e.key === 'ArrowRight') {
                navigateColors('next');
            }
        }
    });
    
    // Touch swipe handling for fullscreen
    let touchStartX = 0;
    let touchEndX = 0;
    
    $(document).on('touchstart', '.color-fullscreen-container', function(e) {
        touchStartX = e.originalEvent.touches[0].clientX;
    });
    
    $(document).on('touchend', '.color-fullscreen-container', function(e) {
        touchEndX = e.originalEvent.changedTouches[0].clientX;
        handleSwipe();
    });
    
    function handleSwipe() {
        const threshold = 50;
        if (touchEndX < touchStartX - threshold) {
            navigateColors('next');
        } else if (touchEndX > touchStartX + threshold) {
            navigateColors('prev');
        }
    }
    
    // Scrolling hint for desktop
    $('.color-scroll-container').on('mouseenter', function() {
        if (this.scrollWidth > this.clientWidth) {
            $(this).addClass('scrollable-hint');
            setTimeout(() => {
                $(this).removeClass('scrollable-hint');
            }, 1500);
        }
    });
    
    // Mobile-only: Add swipe support for color carousel
    if (isMobile) {
        const colorContainer = document.querySelector('.color-scroll-container');
        if (colorContainer) {
            let startX, endX;
            colorContainer.addEventListener('touchstart', function(e) {
                startX = e.touches[0].clientX;
            }, {passive: true});
            
            colorContainer.addEventListener('touchend', function(e) {
                endX = e.changedTouches[0].clientX;
                const diffX = startX - endX;
                const threshold = 50;
                
                if (Math.abs(diffX) > threshold) {
                    colorContainer.scrollBy({
                        left: diffX * 1.5,
                        behavior: 'smooth'
                    });
                }
            }, {passive: true});
        }
    }
}

function showAllColorsModal() {
    // Remove existing modal if any
    $('#allColorsModal').remove();
    
    // Build accessible modal HTML
    let modalHtml = `
        <div class="modal fade" id="allColorsModal" tabindex="-1" role="dialog" aria-labelledby="allColorsModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="allColorsModalTitle">All Colors</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="color-grid" role="list" aria-label="All color options">`;
    
    // Add all color items
    colors.forEach((color, index) => {
        modalHtml += `
            <div class="color-grid-item" data-index="${index}" role="listitem">
                <div class="color-image">
                    <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 160 160'%3E%3C/svg%3E" 
                        data-src="${color.path}" 
                        width="160" 
                        height="160" 
                        loading="lazy" 
                        class="lazyload" 
                        alt="${color.name}" 
                        onerror="this.onerror=null; this.src='images/placeholder.jpg';">
                </div>
                <div class="color-name">${color.name}</div>
            </div>`;
    });
    
    modalHtml += `
                        </div>
                    </div>
                </div>
            </div>
        </div>`;
    
    // Add modal to document
    $('body').append(modalHtml);
    
    // Initialize Bootstrap modal
    const modal = new bootstrap.Modal(document.getElementById('allColorsModal'));
    modal.show();
    
    // Initialize lazy loading after modal is shown
    setTimeout(initLazyLoading, 100);
}

function showColorFullscreen(index) {
    currentColorIndex = index;
    const color = colors[index];
    
    // Remove existing fullscreen container if any
    $('.color-fullscreen-container').remove();
    
    // Create accessible fullscreen view
    const fullscreenHtml = `
        <div class="color-fullscreen-container" role="dialog" aria-labelledby="fullscreenColorName" aria-modal="true">
            <div class="color-fullscreen-content">
                <img src="${color.path}" 
                    alt="${color.name}" 
                    class="color-fullscreen-image" 
                    onerror="this.onerror=null; this.src='images/placeholder.jpg';">
                <div class="color-fullscreen-caption" id="fullscreenColorName">${color.name}</div>
                <button class="color-fullscreen-nav color-fullscreen-prev" aria-label="Previous color">
                    <i class="bi bi-chevron-left" aria-hidden="true"></i>
                </button>
                <button class="color-fullscreen-nav color-fullscreen-next" aria-label="Next color">
                    <i class="bi bi-chevron-right" aria-hidden="true"></i>
                </button>
                <button class="color-fullscreen-close" aria-label="Close fullscreen view">
                    <i class="bi bi-x" aria-hidden="true"></i>
                </button>
            </div>
        </div>`;
    
    // Add to document
    $('body').append(fullscreenHtml);
    $('body').addClass('overflow-hidden');
    
    // Close modal if open
    const modal = bootstrap.Modal.getInstance(document.getElementById('allColorsModal'));
    if (modal) {
        modal.hide();
    }
}

function closeColorFullscreen() {
    $('.color-fullscreen-container').remove();
    $('body').removeClass('overflow-hidden');
    
    // Reopen modal if it exists
    if ($('#allColorsModal').length) {
        const modal = new bootstrap.Modal(document.getElementById('allColorsModal'));
        modal.show();
    }
}

function navigateColors(direction) {
    if (direction === 'prev') {
        currentColorIndex = (currentColorIndex - 1 + colors.length) % colors.length;
    } else {
        currentColorIndex = (currentColorIndex + 1) % colors.length;
    }
    
    const color = colors[currentColorIndex];
    
    // Update image and caption
    $('.color-fullscreen-image')
        .attr('src', color.path)
        .attr('alt', color.name)
        .on('error', function() {
            $(this).attr('src', 'images/placeholder.jpg');
        });
    
    $('.color-fullscreen-caption').text(color.name);
    
    // Update screen reader announcement
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.textContent = `Now viewing ${color.name}`;
    announcement.style.position = 'absolute';
    announcement.style.width = '1px';
    announcement.style.height = '1px';
    announcement.style.overflow = 'hidden';
    document.body.appendChild(announcement);
    
    // Remove announcement after it's been read
    setTimeout(function() {
        document.body.removeChild(announcement);
    }, 3000);
}

// Initialize on page load
$(window).on('load', function() {
    setTimeout(initColorCarousel, 300);
});

})(jQuery);
